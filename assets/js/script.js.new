/**
 * Custom JavaScript for Blog Management System
 */

// Initialize when document is ready
document.addEventListener('DOMContentLoaded', function() {
    // Initialize Bootstrap tooltips
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });

    // Initialize Bootstrap popovers
    var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
    var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl);
    });

    // Automatically close alerts after 5 seconds
    setTimeout(function() {
        var alerts = document.querySelectorAll('.alert');
        alerts.forEach(function(alert) {
            var bsAlert = new bootstrap.Alert(alert);
            bsAlert.close();
        });
    }, 5000);

    // Comment form validation
    const commentForm = document.getElementById('commentForm');
    if (commentForm) {
        commentForm.addEventListener('submit', function(e) {
                e.preventDefault();
            const contentField = document.getElementById('content');
            if (!contentField.value.trim()) {
                alert('Please enter a comment before submitting.');
                return;
            }
            
            // Submit the main comment form via AJAX
            submitCommentForm(this);
        });
    }

    // Post form validation
    const postForm = document.getElementById('postForm');
    if (postForm) {
        postForm.addEventListener('submit', function(e) {
            const title = document.getElementById('title');
            const content = document.getElementById('content');
            const taxonomy = document.getElementById('taxonomy');
            
            if (!title.value.trim() || !content.value.trim() || !taxonomy.value) {
                e.preventDefault();
                alert('Please fill in all required fields before submitting.');
            }
        });
    }

    // Confirmation for delete actions
    const deleteButtons = document.querySelectorAll('.delete-btn');
    deleteButtons.forEach(function(button) {
        button.addEventListener('click', function(e) {
            if (!confirm('Are you sure you want to delete this item? This action cannot be undone.')) {
                e.preventDefault();
            }
        });
    });

    // Toggle sidebar in admin panel
    const sidebarToggle = document.getElementById('sidebarToggle');
    if (sidebarToggle) {
        sidebarToggle.addEventListener('click', function() {
            document.querySelector('.admin-sidebar').classList.toggle('d-none');
        });
    }
    
    // Copy link functionality
    const copyLinkButtons = document.querySelectorAll('.copy-link-btn');
    if (copyLinkButtons.length > 0) {
        copyLinkButtons.forEach(function(button) {
            button.addEventListener('click', function() {
                const postUrl = this.getAttribute('data-post-url');
                navigator.clipboard.writeText(postUrl).then(
                    function() {
                        // Create toast notification
                        const toastContainer = document.createElement('div');
                        toastContainer.classList.add('position-fixed', 'bottom-0', 'end-0', 'p-3');
                        toastContainer.style.zIndex = '11';
                        
                        const toastHtml = `
                            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                                <div class="toast-header">
                                    <i class="fas fa-link me-2"></i>
                                    <strong class="me-auto">Link Copied</strong>
                                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                                </div>
                                <div class="toast-body">
                                    Link copied to clipboard!
                                </div>
                            </div>
                        `;
                        
                        toastContainer.innerHTML = toastHtml;
                        document.body.appendChild(toastContainer);
                        
                        // Auto-remove toast after 3 seconds
                        setTimeout(function() {
                            toastContainer.remove();
                        }, 3000);
                    },
                    function(err) {
                        console.error('Could not copy text: ', err);
                        alert('Failed to copy link to clipboard');
                    }
                );
            });
        });
    }
    
    // Notifications dropdown functionality
    const notificationsDropdown = document.getElementById('notificationsDropdown');
    const notificationsContainer = document.getElementById('notificationsContainer');
    const markAllReadBtn = document.getElementById('markAllNotificationsRead');
    
    if (notificationsDropdown && notificationsContainer) {
        // Load notifications when dropdown is opened
        notificationsDropdown.addEventListener('show.bs.dropdown', function () {
            loadNotifications();
        });
        
        // Handle click events within notification container
        notificationsContainer.addEventListener('click', function(e) {
            // Check if clicked on mark as read button
            const markReadBtn = e.target.closest('.notification-mark-read');
            if (markReadBtn) {
                e.preventDefault();
                e.stopPropagation();
                const notificationId = markReadBtn.getAttribute('data-id');
                markNotificationAsRead(notificationId, markReadBtn.closest('.notification-item'));
                return false;
            }
        });
    }
    
    // Mark all notifications as read
    if (markAllReadBtn) {
        markAllReadBtn.addEventListener('click', function(e) {
            e.preventDefault();
            markAllNotificationsAsRead();
        });
    }

    // Post like functionality
    initPostLikes();

    // Initialize comment reply functionality
    initCommentReplies();
});

/**
 * Load notifications via AJAX
 */
function loadNotifications() {
    const container = document.getElementById('notificationsContainer');
    if (!container) return;
    
    // Show loading spinner
    container.innerHTML = `
        <div class="text-center p-3">
            <div class="spinner-border spinner-border-sm text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    `;
    
    // Fetch notifications
    fetch(siteUrl + '/?page=notifications', {
        method: 'GET',
        headers: {
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.notifications && data.notifications.length > 0) {
            let html = '';
            
            data.notifications.forEach(notification => {
                let icon = '';
                let linkUrl = '#';
                
                if (notification.type === 'post_approval') {
                    icon = '<i class="fas fa-check-circle text-success me-2"></i>';
                    linkUrl = siteUrl + '/?page=view-post&id=' + notification.reference_id;
                } else if (notification.type === 'post_rejection') {
                    icon = '<i class="fas fa-times-circle text-danger me-2"></i>';
                    linkUrl = siteUrl + '/?page=view-post&id=' + notification.reference_id;
                } else if (notification.type === 'comment') {
                    icon = '<i class="fas fa-comment text-primary me-2"></i>';
                    linkUrl = siteUrl + '/?page=view-post&id=' + notification.reference_id + '#comment-' + notification.id;
                } else if (notification.type === 'profile-update') {
                    icon = '<i class="fas fa-user-edit text-info me-2"></i>';
                    linkUrl = siteUrl + '/?page=profile';
                } else if (notification.type === 'like') {
                    icon = '<i class="fas fa-heart text-danger me-2"></i>';
                    linkUrl = siteUrl + '/?page=view-post&id=' + notification.reference_id;
                }
                
                html += `
                    <a href="${linkUrl}" class="dropdown-item notification-item ${notification.is_read ? '' : 'unread'}">
                        <div class="d-flex align-items-center">
                            ${icon}
                            <div class="flex-grow-1">
                                <div class="small">${notification.content}</div>
                                <div class="small text-muted">${formatTimeAgo(notification.created_at)}</div>
                            </div>
                            ${!notification.is_read ? `
                                <button class="btn btn-sm text-primary notification-mark-read" data-id="${notification.id}">
                                    <i class="fas fa-check"></i>
                                </button>
                            ` : ''}
                        </div>
                    </a>
                `;
            });
            
            container.innerHTML = html;
            
            // Add event listeners to mark-read buttons
            const markReadButtons = container.querySelectorAll('.notification-mark-read');
            markReadButtons.forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    const notificationId = this.getAttribute('data-id');
                    markNotificationAsRead(notificationId, this.closest('.notification-item'));
                });
            });
        } else {
            container.innerHTML = `
                <div class="text-center p-4">
                    <i class="fas fa-bell-slash fa-2x text-muted mb-3"></i>
                    <p class="text-muted mb-0">No notifications yet</p>
                </div>
            `;
        }
    })
    .catch(error => {
        console.error('Error fetching notifications:', error);
        container.innerHTML = `
            <div class="text-center p-3">
                <p class="text-danger mb-0">Failed to load notifications</p>
            </div>
        `;
    });
} 